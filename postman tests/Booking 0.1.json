{
	"info": {
		"_postman_id": "5a27bfd2-9a9e-4d50-8552-81a99293d696",
		"name": "Booking 0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28184234"
	},
	"item": [
		{
			"name": "Creation user for booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "",
						"username": ""
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"null\",\r\n    \"name\": \"Pyotr\",\r\n    \"surname\": \"Alexandrov\",\r\n    \"birthdate\": \"1997-03-03\",\r\n    \"email\": \"alexandrov@mail.ru\",\r\n    \"phone\": \"89996661122\",\r\n    \"password\": \"1jdbfag4m\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users"
			},
			"response": []
		},
		{
			"name": "Booking entity creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Getting exception if booking exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 409 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Getting exception if user doesn't exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/900"
			},
			"response": []
		},
		{
			"name": "Getting exception if Spot is null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Getting exception if end is in past",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Parking spot\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Getting exception if isTradable is null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": null,\r\n    \"isSubscription\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Getting exception if isSubscription is null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": true,\r\n    \"isSubscription\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/bookings/9"
			},
			"response": []
		},
		{
			"name": "Booking cancelling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 204\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/bookings/9/7"
			},
			"response": []
		},
		{
			"name": "Not found user id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/bookings/999/7"
			},
			"response": []
		},
		{
			"name": "Not found booking id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8080/bookings/9/7"
			},
			"response": []
		}
	]
}