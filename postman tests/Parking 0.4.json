{
	"info": {
		"_postman_id": "038f016b-8a24-4407-a95a-86f313ae8294",
		"name": "Parking 0.4",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28184234"
	},
	"item": [
		{
			"name": "User 0.1",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Should login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('accessToken');\r",
											"    pm.expect(jsonData).to.have.property('tokenType');\r",
											"    pm.globals.set(\"adminToken\", jsonData.accessToken);    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \"+79999999999\",\r\n    \"password\": \"test1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if name is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotBlank.name');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"   \",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if surname is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotBlank.surname');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if birthdate is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotNull.birthdate');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if birthdate is in future",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Past.birthdate');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"2999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if email is not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Email.email');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if phone is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotBlank.phone');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if phone is not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Phone.phone');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+799 93332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if password is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotBlank.password');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when register if password is too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Length.password');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;H\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/register"
							},
							"response": []
						},
						{
							"name": "Should throw exception when login if phone is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 401 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.equal('Unauthorized');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \" \",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "Should throw exception when login if password is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.equal('Unauthorized'); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \"+79993332202\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/auth/login"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's id doesn't exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/0"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's phone and email exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 409\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's email is not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Email.email');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"griboedovmail.ru\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's phone is not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Phone.phone');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phone\": \"84956789999\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's birthdate in future",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Past.birthdate');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"9999-12-12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's password is too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Length.password');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdh\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if user's password is too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('Length.password');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdhgfoe750jhf4HPRL8952kgps20nhrq975;HK9746\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "Should throw exception when update if id is not number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdhgfoe750jhf4HPRL8952kgps20nhrq975;HK9746\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/users/ioijo"
							},
							"response": []
						},
						{
							"name": "Should throw exception if user's id wasn't found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/personal/users/0"
							},
							"response": []
						},
						{
							"name": "Should throw exception if user's id is not number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/personal/users/iui"
							},
							"response": []
						}
					]
				},
				{
					"name": "Should register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('surname');\r",
									"    pm.globals.set(\"userId\", jsonData.id); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/auth/register"
					},
					"response": []
				},
				{
					"name": "Should register user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('surname');\r",
									"    pm.globals.set(\"userId\", jsonData.id); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/auth/register"
					},
					"response": []
				},
				{
					"name": "Should update all user's fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/users/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Should login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('accessToken');\r",
									"    pm.expect(jsonData).to.have.property('tokenType');\r",
									"    pm.globals.set(\"accessToken\", jsonData.accessToken);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"+79883331090\",\r\n    \"password\": \"456bmnGJB_oj43\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/auth/login"
					},
					"response": []
				},
				{
					"name": "Get new token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('accessToken');\r",
									"    pm.expect(jsonData).to.have.property('tokenType');\r",
									"    pm.globals.set(\"accessToken\", jsonData.accessToken);    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/auth/login"
					},
					"response": []
				},
				{
					"name": "Should return user's data by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('surname');\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/users/{{userId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Vehicle 0.2",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Should throw exception when the vehicle is already registered with a different govNum or VINnum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 409 and JSON format data\", function() {",
											"        pm.response.to.have.status(409);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.equals(\"The vehicle with the specified registration number or VIN has already been registered\");",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК98\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle model is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.model');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": null,\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle type is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.type');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle vin is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.vin');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when releaseYear is in the future",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('PastOrPresent.releaseYear');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2045-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle color is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.color');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle engineType is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.engineType');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle govNumber is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {",
											"        pm.response.to.have.status(400);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.include('NotBlank.govNumber');",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicle doesn't exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 404 and JSON format data\", function() {",
											"        pm.response.to.have.status(404);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.equal(\"The vehicle wasn't found\");",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"govNumber\": \"Х228ХХ148\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/vehicles/0"
							},
							"response": []
						},
						{
							"name": "Should throw exception when the vehicleID doesn't exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;",
											"console.log(serverResponse);",
											"pm.test(\"Server response must have status code 201 and JSON format data\", function() {",
											"        pm.response.to.have.status(404);",
											"        pm.response.to.be.withBody;",
											"        pm.response.to.be.json;",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property('message');",
											"        pm.expect(jsonData.message).to.equal(\"The vehicle wasn't found\");",
											"    }",
											"); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/vehicles/0"
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {",
									"        pm.response.to.have.status(200);",
									"        pm.response.to.be.withBody;",
									"        pm.response.to.be.json;",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.globals.set(\"vehicleId\", jsonData.id);",
									"        console.log(jsonData.id);",
									"    }",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"Ford Focus 1\",\n    \"type\": \"CAR\",\n    \"vin\": \"vin1234\",\n    \"releaseYear\": \"2005-01-01\",\n    \"color\": \"Silver\",\n    \"engineType\": \"Бензиновый двигатель\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles"
					},
					"response": []
				},
				{
					"name": "Update vehicle (all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {",
									"        pm.response.to.have.status(200);",
									"        pm.response.to.be.withBody;",
									"        pm.response.to.be.json;",
									"    }",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\": \"Black\",\n    \"govNumber\": \"У166ХК97\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/{{vehicleId}}"
					},
					"response": []
				},
				{
					"name": "Update vehicle (only color)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {",
									"        pm.response.to.have.status(201);",
									"        pm.response.to.be.withBody;",
									"        pm.response.to.be.json;",
									"    }",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\": \"Red\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/{{vehicleId}}"
					},
					"response": []
				},
				{
					"name": "Update vehicle (only govNumber)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {",
									"        pm.response.to.have.status(201);",
									"        pm.response.to.be.withBody;",
									"        pm.response.to.be.json;",
									"    }",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"govNumber\": \"Х228ХХ148\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/{{vehicleId}}"
					},
					"response": []
				},
				{
					"name": "Get vehicle info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {",
									"        pm.response.to.have.status(200);",
									"        pm.response.to.be.withBody;",
									"        pm.response.to.be.json;",
									"    }",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/vehicles/{{vehicleId}}"
					},
					"response": []
				},
				{
					"name": "Creation of transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(201);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.globals.set(\"transferRequestId\", jsonData.id);\r",
									"        console.log(jsonData.id);\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Alina\",\r\n    \"surname\": \"Kovrova\",\r\n    \"phoneNumber\": \"+79883332202\",\r\n    \"govNumber\": \"P222ХM01\",\r\n    \"vin\": \"JF8LBS6C10000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Creation of the first transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(201);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.globals.set(\"firstTransferRequestId\", jsonData.id);\r",
									"        console.log(jsonData.id);\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Creation of the second transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(201);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.globals.set(\"secondTransferRequestId\", jsonData.id);\r",
									"        console.log(jsonData.id);\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Elizaveta\",\r\n    \"surname\": \"Molohova\",\r\n    \"phoneNumber\": \"+79883331090\",\r\n    \"govNumber\": \"У167ХC29\",\r\n    \"vin\": \"VF3LBS6C10000001\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if vehicle wasn't found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(404);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"govNumber\": \"У166ХК99\",\r\n    \"vin\": \"VF3LBS6C100000022\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if govNumber is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if vin is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"govNumber\": \"У166ХК97\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Confirmation of transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/transfer/{{transferRequestId}}?state=ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"transfer",
								"{{transferRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Throws exception if user has no rights for operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(403);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/transfer/{{transferRequestId}}?state=ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"transfer",
								"{{transferRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Throws exception if request wasn't found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(404);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/transfer/999?state=ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"transfer",
								"999"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rejection of the first transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/transfer/{{firstTransferRequestId}}?state=REJECTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"transfer",
								"{{firstTransferRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rejection of the second transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/transfer/{{secondTransferRequestId}}?state=REJECTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"transfer",
								"{{secondTransferRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Throw exception if phone doesn't belong to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 409 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(409);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79883331090\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if phone number doesn't match pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+7999999\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if phone number is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"surname\": \"Shatalov\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if name is null for transfer request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"surname\": \"Shatalov\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Throws exception if surname is null for trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(400);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									"); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Andrew\",\r\n    \"phoneNumber\": \"+79996603322\",\r\n    \"govNumber\": \"У166ХК97\",\r\n    \"vin\": \"VF3LBS6C100000000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/vehicles/transfer"
					},
					"response": []
				},
				{
					"name": "Returns list of requests for owner with length 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/owner/transfer?state=REJECTED&from=0&size=5&sort=ASC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"owner",
								"transfer"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of requests for requester with length 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/requester/transfer?state=REJECTED&from=0&size=5&sort=ASC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"requester",
								"transfer"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of requests for owner with length 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/owner/transfer?state=ACCEPTED&from=0&size=5&sort=ASC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"owner",
								"transfer"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns list of requests for requester with length 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/vehicles/requester/transfer?state=ACCEPTED&from=0&size=5&sort=DESC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"vehicles",
								"requester",
								"transfer"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sort",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Spot 0.1",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Should throw exception when created Spot if Role is not Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.equal('Forbidden');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": 23.253362,\r\n    \"longitude\": -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if latitude is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotNull.latitude');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": null,\r\n    \"longitude\": -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if latitude is not number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('JSON parse error');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": \"jsajdsd\", //23.23313,\r\n    \"longitude\": -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if longitude is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotNull.longitude');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": 23.4222,\r\n    \"longitude\": null, // -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if floor is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotNull.floor');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": 23.4222,\r\n    \"longitude\": -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": null, //2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if isHandicapped is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('NotNull.isHandicapped');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": 23.4222,\r\n    \"longitude\": -136.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": null // false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception when created Spot if already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"console.log(serverResponse);\r",
											"pm.test(\"Server response must have status code 409 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.include('already exists');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{adminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"latitude\": 25.253362,\r\n    \"longitude\": -137.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/admin/spots"
							},
							"response": []
						},
						{
							"name": "Should throw exception if spot's id wasn't found | for User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;    \r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).is.not.null;\r",
											"    pm.expect(jsonData.message).to.include('Spot with id').to.include('hasn\\'t been found');\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/personal/spots/0"
							},
							"response": []
						},
						{
							"name": "Should throw exception if spot's id is not number | for User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).is.not.null;\r",
											"    pm.expect(jsonData.message).to.include('Failed to convert value of type').to.include('For input string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{userToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:8080/personal/spots/fdtfdddrd"
							},
							"response": []
						}
					]
				},
				{
					"name": "Should create Spot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('latitude');\r",
									"    pm.expect(jsonData).to.have.property('longitude');\r",
									"    pm.expect(jsonData).to.have.property('spotState');\r",
									"    pm.expect(jsonData.spotState).to.equal(\"BLOCKED\");\r",
									"    pm.expect(jsonData).to.have.property('isStoreyed');\r",
									"    pm.expect(jsonData).to.have.property('floor');\r",
									"    pm.expect(jsonData).to.have.property('picture');\r",
									"    pm.expect(jsonData).to.have.property('isHandicapped');\r",
									"    pm.globals.set(\"spotId\", jsonData.id);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"latitude\": 25.253362,\r\n    \"longitude\": -137.253521,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/admin/spots"
					},
					"response": []
				},
				{
					"name": "Should update Spot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('latitude');\r",
									"    pm.expect(jsonData).to.have.property('longitude');\r",
									"    pm.expect(jsonData).to.have.property('spotState');\r",
									"    pm.expect(jsonData.spotState).to.equal(\"BLOCKED\");\r",
									"    pm.expect(jsonData).to.have.property('isStoreyed');\r",
									"    pm.expect(jsonData).to.have.property('floor');\r",
									"    pm.expect(jsonData).to.have.property('picture');\r",
									"    pm.expect(jsonData).to.have.property('isHandicapped');\r",
									"    pm.globals.set(\"spotId\", jsonData.id);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"latitude\": 25.2533620,\r\n    \"longitude\": -137.2535210,\r\n    \"isStoreyed\": true,\r\n    \"floor\": 2,\r\n    \"picture\": \"https://parus-msk.ru/wp-content/uploads/shop_property_file_245_857.jpg\",\r\n    \"isHandicapped\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/admin/spots/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Should return spot's data by id | for Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('latitude');\r",
									"    pm.expect(jsonData).to.have.property('longitude');\r",
									"    pm.expect(jsonData).to.have.property('spotState');\r",
									"    pm.expect(jsonData).to.have.property('isStoreyed');\r",
									"    pm.expect(jsonData).to.have.property('floor');\r",
									"    pm.expect(jsonData).to.have.property('picture');\r",
									"    pm.expect(jsonData).to.have.property('isHandicapped');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{adminToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/spots/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Should return spot's data by id | for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('latitude');\r",
									"    pm.expect(jsonData).to.have.property('longitude');\r",
									"    pm.expect(jsonData).to.have.property('spotState');\r",
									"    pm.expect(jsonData).to.have.property('isStoreyed');\r",
									"    pm.expect(jsonData).to.have.property('floor');\r",
									"    pm.expect(jsonData).to.have.property('picture');\r",
									"    pm.expect(jsonData).to.have.property('isHandicapped');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/spots/{{spotId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking 0.1",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "Getting exception if booking exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 409 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/{{userId}}/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Getting exception if user doesn't exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/999/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Getting exception if Spot is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/{{userId}}/null/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Getting exception if end is in past",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"Parking spot\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/{{userId}}/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Getting exception if isTradable is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": null,\r\n    \"isSubscription\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/{{userId}}/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Getting exception if isSubscription is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2000-12-12T15:15:15\",\r\n    \"isTradable\": true,\r\n    \"isSubscription\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:8080/personal/bookings/{{userId}}/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Not found user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "http://localhost:8080/personal/bookings/0/{{spotId}}/{{vehicleId}}"
							},
							"response": []
						},
						{
							"name": "Not found booking id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let serverResponse = pm.response;\r",
											"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "http://localhost:8080/personal/bookings/0/{{bookingId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Booking entity creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.globals.set(\"bookingId\", jsonData.id);\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"spot\": \"Dummy\",\r\n    \"end\": \"2024-12-12T15:15:15\",\r\n    \"isTradable\": false,\r\n    \"isSubscription\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/bookings/{{userId}}/{{spotId}}/{{vehicleId}}"
					},
					"response": []
				},
				{
					"name": "Booking cancelling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/personal/bookings/{{userId}}/{{bookingId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "TradeRequest 0.1",
			"item": [
				{
					"name": "Creation of trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState');\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"    pm.globals.set(\"tradeRequestId\", jsonData.id);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/999/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if spot not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/999"
					},
					"response": []
				},
				{
					"name": "Throws exception if spot is available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if price is negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": -12.00,\r\n    \"comment\": \"I'd like to pay more, but I can't\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if price is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"There's gotta be exception ;)\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if comment is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 123.00\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if comment is too short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"Oops\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/"
					},
					"response": []
				},
				{
					"name": "Throws exception if comment is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I am writing to reserve a parking spot for my vehicle (License Plate: XYZ1234) from May 15th to May 20th. I understand the rules and regulations and will adhere to them. Please confirm my reservation at your earliest convenience.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Canceling of trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 204 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8080/personal/requests/cancel/{{userId}}/{{tradeRequestId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8080/personal/requests/cancel/999/{{tradeRequestId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if request not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8080/personal/requests/cancel/{{userId}}/999"
					},
					"response": []
				},
				{
					"name": "Throws exception if not creator is trying to cancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": "http://localhost:8080/personal/requests/cancel/{{secondUserId}}/{{tradeRequestId}}"
					},
					"response": []
				},
				{
					"name": "Creation of another trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState');\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"    pm.globals.set(\"tradeRequestId\", jsonData.id);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Should accept request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState').and.to.be.equals(\"ACCEPTED\");\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/{{userId}}/{{tradeRequestId}}?state=ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"{{userId}}",
								"{{tradeRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Throws Exception if not owner of the spot is trying to update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/1/{{tradeRequestId}}?state=ACCEPTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"1",
								"{{tradeRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should reject request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState').and.to.be.equals(\"REJECTED\");\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/{{userId}}/{{tradeRequestId}}?state=REJECTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"{{userId}}",
								"{{tradeRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Throws exception if request is already rejected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/{{userId}}/{{tradeRequestId}}?state=REJECTED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"{{userId}}",
								"{{tradeRequestId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Creation of one more trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState');\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"    pm.globals.set(\"tradeRequestId\", jsonData.id);\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 1234.00,\r\n    \"comment\": \"I want to pay more\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{spotId}}"
					},
					"response": []
				},
				{
					"name": "Returns the list of incoming requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Returns the list of requests for owner\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/owner/{{userId}}?state=PENDING&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"owner",
								"{{userId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "PENDING"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns the empty list of outgoing requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Returns the list of requests for owner\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/owner/{{userId}}?state=REJECTED&from=0&size=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"owner",
								"{{userId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "REJECTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns the list of outgoing requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Returns the list of requests for owner\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/1?state=PENDING&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"1"
							],
							"query": [
								{
									"key": "state",
									"value": "PENDING"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns the empty list of incoming requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Returns the list of requests for owner\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personal/requests/{{secondUserId}}?state=ACCEPTED&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personal",
								"requests",
								"{{secondUserId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "ACCEPTED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns the request for owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState');\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/requests/{{userId}}/{{tradeRequestId}}"
					},
					"response": []
				},
				{
					"name": "Returns the request by spot and user id for booker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('spot');\r",
									"    pm.expect(jsonData).to.have.property('requestDate');\r",
									"    pm.expect(jsonData).to.have.property('requestState');\r",
									"    pm.expect(jsonData).to.have.property('comment');\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/requests/1/{{tradeRequestId}}"
					},
					"response": []
				},
				{
					"name": "Throws exception if trade request wasn't found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 404 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/requests/1/999"
					},
					"response": []
				},
				{
					"name": "Throws exception if not booker nor owner is trying to get request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let serverResponse = pm.response;\r",
									"pm.test(\"Server response must have status code 403 and JSON format data\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIrNzk5OTk5OTk5OTkiLCJpYXQiOjE3MTU1MTk0OTEsImV4cCI6MTcxNjUxOTQ5MX0.CZUX_QK3Pysu4w-hfWXlrNlYGFcEqNWykubRYMkkNX-xknG1KXyqPzzJ8q__MTFoBPJG6qEeDNmoN8eadVwr-w"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/personal/requests/{{randomUserId}}/{{tradeRequestId}}"
					},
					"response": []
				}
			]
		}
	]
}