{
	"info": {
		"_postman_id": "ecb4315c-3b9d-43c3-9e92-3e8621faf4bf",
		"name": "User 0.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15955372"
	},
	"item": [
		{
			"name": "Should register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 201 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('surname');\r",
							"    pm.globals.set(\"userId\", jsonData.id); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"    "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if name is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"console.log(serverResponse);\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('NotBlank.name');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"   \",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if surname is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('NotBlank.surname');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if birthdate is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('NotNull.birthdate');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if birthdate is in future",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Past.birthdate');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"2999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if email is not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Email.email');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if phone is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('NotBlank.phone');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if phone is not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Phone.phone');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+799 93332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if password is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('NotBlank.password');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when register if password is too short",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Length.password');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Igor\",\r\n    \"surname\": \"Popov\",\r\n    \"birthdate\": \"1999-12-13\",\r\n    \"email\": \"griboedov2@mail.ru\",\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;H\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('accessToken');\r",
							"    pm.expect(jsonData).to.have.property('tokenType');\r",
							"    pm.globals.set(\"accessToken\", jsonData.accessToken);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"+79993332202\",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when login if phone is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 401 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"    pm.expect(jsonData.error).to.equal('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \" \",\r\n    \"password\": \"jhdhg;HK97462\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when login if password is empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(401);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"    pm.expect(jsonData.error).to.equal('Unauthorized'); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"+79993332202\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should update all user's fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get new token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('accessToken');\r",
							"    pm.expect(jsonData).to.have.property('tokenType');\r",
							"    pm.globals.set(\"accessToken\", jsonData.accessToken);    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's id doesn't exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 404\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's phone and email exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 409\", function() {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"1999-12-12\",\r\n    \"email\": \"griboedov@mail.ru\",\r\n    \"phone\": \"+79993332200\",\r\n    \"password\": \"jhdhg;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's email is not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Email.email');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"griboedovmail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's phone is not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Phone.phone');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"84956789999\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's birthdate in future",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Past.birthdate');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"birthdate\": \"9999-12-12\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's password is too short",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Length.password');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdh\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if user's password is too long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('Length.password');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdhgfoe750jhf4HPRL8952kgps20nhrq975;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception when update if id is not number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anatoliy\",\r\n    \"surname\": \"Gribordov\",\r\n    \"password\": \"jhdhgfoe750jhf4HPRL8952kgps20nhrq975;HK9746\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/personal/users/ioijo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"ioijo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return user's data by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 200 and JSON format data\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('surname');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/personal/users/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception if user's id wasn't found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 404\", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/personal/users/999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should throw exception if user's id is not number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Server response must have status code 400\", function() {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/personal/users/iui",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"personal",
						"users",
						"iui"
					]
				}
			},
			"response": []
		}
	]
}